openapi: 3.0.0
info:
  title: FDFED API
  version: 1.0.0
  description: API documentation for the FDFED application.

servers:
  - url: http://localhost:4000
    description: Local server
  - url: https://fdfed-2-server.vercel.app
    description: Deployed server

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token

  schemas:
    Feedback:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        feedback:
          type: string
        rating:
          type: integer
          minimum: 1
          maximum: 5
        createdAt:
          type: string
          format: date-time
      required:
        - name
        - email
        - feedback
        - rating

    VisitedUser:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email

    AuctionHistoryEntry:
      type: object
      properties:
        bidder:
          type: string
        price:
          type: number

    Item:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        person:
          type: string
        pid:
          type: string
        url:
          type: string
          format: uri
        base_price:
          type: number
        current_bidder:
          type: string
        current_bidder_id:
          type: string
        current_price:
          type: number
        type:
          type: string
        auction_active:
          type: boolean
        date:
          type: string
          format: date-time
        StartTime:
          type: string
          format: date-time
        EndTime:
          type: string
          format: date-time
        visited_users:
          type: array
          items:
            $ref: '#/components/schemas/VisitedUser'
        auction_history:
          type: array
          items:
            $ref: '#/components/schemas/AuctionHistoryEntry'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    User:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        liked:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - name
        - email
        - password

    Seller:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        password:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        solditems:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        likeditems:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - name
        - email
        - password

paths:
  # ====================== #
  #        User Routes      #
  # ====================== #
  /:
    get:
      tags: [User]
      summary: Welcome endpoint
      responses:
        '200':
          description: Returns a welcome message.

  /register:
    post:
      tags: [User]
      summary: User registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - username
                - email
                - password
      responses:
        '200':
          description: Successful Register.

  /login:
    post:
      tags: [User]
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful.
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json

  
  paths:
  # ====================== #
  #        User Routes      #
  # ====================== #
  /user/{id}:
    delete:
      tags: [User]
      summary: Delete user by ID
      description: Deletes a user by their unique identifier
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the user to delete
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  name:
                    type: string
                  email:
                    type: string
                    format: email
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
        '401':
          description: Unauthorized - Invalid or missing authentication token
        '404':
          description: User not found
        '500':
          description: Internal server error

  # /auction/{userid}/{itemid}:
  #   get:
  #     tags: [User]
  #     summary: Render auction page
  #     parameters:
  #       - name: userid
  #         in: path
  #         required: true
  #         schema:
  #           type: string
  #       - name: itemid
  #         in: path
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       '200':
  #         description: Returns auction page data.

    # post:
    #   tags: [User]
    #   summary: Place a bid
    #   parameters:
    #     - name: userid
    #       in: path
    #       required: true
    #       schema:
    #         type: string
    #     - name: itemid
    #       in: path
    #       required: true
    #       schema:
    #         type: string
    #   requestBody:
    #     required: true
    #     content:
    #       application/json:
    #         schema:
    #           type: object
    #           properties:
    #             bid:
    #               type: number
    #           required:
    #             - bid
    #   responses:
    #     '200':
    #       description: Bid placed successfully.

  /liked/{id}:
    get:
      tags: [User]
      summary: Get liked items
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns liked items.

  /liked/{userid}/{itemid}:
    post:
      tags: [User]
      summary: Add to liked items
      parameters:
        - name: userid
          in: path
          required: true
          schema:
            type: string
        - name: itemid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Item added to liked items.

    delete:
      tags: [User]
      summary: Remove from liked items
      parameters:
        - name: userid
          in: path
          required: true
          schema:
            type: string
        - name: itemid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Item removed from liked items.

  # ====================== #
  #      Seller Routes      #
  # ====================== #
  /sellerregister:
    post:
      tags: [Seller]
      summary: Seller registration
      description: Register a new seller account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: "securePassword123"
                phone:
                  type: string
                  pattern: '^\+?[0-9]{10,15}$'
                  example: "1234567890"
              required:
                - name
                - email
                - password
                - phone
      responses:
        '201':
          description: Seller created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Seller registered successfully"
                  seller:
                    $ref: '#/components/schemas/Seller'
        '400':
          description: Bad Request - Missing or invalid fields
        '409':
          description: Conflict - Email already registered
        '500':
          description: Internal server error


  /sellerlogin:
    post:
      tags: [Seller]
      summary: Seller login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: 
                  type: string
                  format: email
                password: 
                  type: string
              required: 
                - email
                - password
      responses:
        '200':
          description: Successfully logged in
          headers:
            Set-Cookie:
              schema:
                type: string
                example: token=abcde12345; Path=/; HttpOnly

  /sellerhome/{id}:
    get:
      tags: [Seller]
      summary: Get seller home data
      description: Retrieves seller profile and their listed items
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the seller
          schema:
            type: string
      responses:
        '200':
          description: Seller home data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Seller data retrieved successfully"
                  source:
                    type: string
                    example: "seller-home-controller"
                  responseTime:
                    type: number
                    example: 0.45
                  data:
                    type: object
                    properties:
                      seller:
                        $ref: '#/components/schemas/Seller'
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Item'
        '401':
          description: Unauthorized - Invalid or missing authentication token
        '404':
          description: Seller not found
        '500':
          description: Internal server error

  /create/{sellerId}:
    post:
      tags: [Seller]
      summary: Create a new auction
      description: Creates a new auction listing for the specified seller
      security:
        - cookieAuth: []
      parameters:
        - name: sellerId
          in: path
          required: true
          description: The ID of the seller creating the auction
          schema:
            type: string
            example: "6818e920f98a61aeacbca6ff"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the item
                  example: "Antique Vase"
                basePrice:
                  type: number
                  format: float
                  description: Starting price for the auction
                  example: 1000
                type:
                  type: string
                  description: Category of the item
                  example: "Antiques"
                date:
                  type: string
                  format: date
                  description: Auction date (YYYY-MM-DD)
                  example: "2025-05-07"
                StartTime:
                  type: string
                  format: time
                  description: Auction start time (HH:MM)
                  example: "14:00"
                EndTime:
                  type: string
                  format: time
                  description: Auction end time (HH:MM)
                  example: "16:00"
                image:
                  type: string
                  format: binary
                  description: Primary image of the item
              required:
                - name
                - basePrice
                - type
                - date
                - StartTime
                - EndTime
                - image
      responses:
        '201':
          description: Auction created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Bad request - Invalid input data
        '401':
          description: Unauthorized - Invalid or missing authentication
        '500':
          description: Internal server error

  /sell/{sellerId}/{itemId}:
    get:
      tags: [Seller]
      summary: Get selling page data
      description: Retrieves detailed information for a specific item being sold by a seller
      security:
        - cookieAuth: []
      parameters:
        - name: sellerId
          in: path
          required: true
          description: ID of the seller
          schema:
            type: string
        - name: itemId
          in: path
          required: true
          description: ID of the item being sold
          schema:
            type: string
      responses:
        '200':
          description: Selling page data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      user:
                        type: string
                        description: User ID
                        example: "6818e920f98a61aeacbca6ff"
                      username:
                        type: string
                        description: Display name of the seller
                        example: "JohnDoe"
                      item:
                        $ref: '#/components/schemas/Item'
        '401':
          description: Unauthorized - Invalid or missing authentication token
        '404':
          description: Not found - Either seller or item doesn't exist
        '500':
          description: Internal server error

  # post:
  #   tags: [Seller]
  #   summary: Mark item as sold
  #   description: Updates the status of a specific item to sold for the authenticated seller
  #   security:
  #     - cookieAuth: []
  #   parameters:
  #     - name: sellerId
  #       in: path
  #       required: true
  #       description: ID of the seller marking the item as sold
  #       schema:
  #         type: string
  #         example: "6818e920f98a61aeacbca6ff"
  #     - name: itemId
  #       in: path
  #       required: true
  #       description: ID of the item to mark as sold
  #       schema:
  #         type: string
  #         example: "681a58e084ba713bc384c4d2"
  #   responses:
  #     '200':
  #       description: Item successfully marked as sold
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               message:
  #                 type: string
  #                 description: Success message
  #                 example: "Item marked as sold successfully"
  #               item:
  #                 $ref: '#/components/schemas/Item'
  #     '400':
  #       description: Bad request - Invalid input parameters
  #     '401':
  #       description: Unauthorized - Invalid or missing authentication token
  #     '403':
  #       description: Forbidden - Seller doesn't own this item
  #     '404':
  #       description: Not found - Either seller or item doesn't exist
  #     '409':
  #       description: Conflict - Item is already sold
  #     '500':
  #       description: Internal server error

  # ====================== #
  #       Admin Routes      #
  # ====================== #
  /admin/login:
    post:
      tags: [Admin]
      summary: Admin login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: Successfully logged in

  /admin/home:
    get:
      tags: [Admin]
      summary: Admin dashboard
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Admin dashboard data
          content:
            application/json:
              schema:
                type: object
                properties:
                  source:
                    type: string
                  responseTime:
                    type: number
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
                      sellers:
                        type: array
                        items:
                          $ref: '#/components/schemas/Seller'
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Item'

  # ====================== #
  #    Additional Routes    #
  # ====================== #
  /feedback:
    post:
      tags: [Additional]
      summary: Submit feedback
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feedback'
      responses:
        '200':
          description: Feedback saved successfully.

  /feedbacks:
    get:
      tags: [Additional]
      summary: Get all feedbacks
      responses:
        '200':
          description: Returns a list of feedbacks.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feedback'

  /item/unsold/{id}:
    post:
      tags: [Additional]
      summary: Mark item as unsold
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Item status updated

  # /item/{id}:
  #   delete:
  #     tags: [Additional]
  #     summary: Delete an item
  #     description: Permanently deletes an item by its ID
  #     security:
  #       - cookieAuth: []
  #     parameters:
  #       - name: id
  #         in: path
  #         required: true
  #         description: The ID of the item to delete (must be a valid MongoDB ObjectId)
  #         schema:
  #           type: string
  #           pattern: '^[0-9a-fA-F]{24}$'
  #           example: "6817ed1fe4bffaff3c3473a7"
  #     responses:
  #       '200':
  #         description: Item deleted successfully
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 message:
  #                   type: string
  #                   example: "Item deleted successfully"
  #                 deletedItem:
  #                   $ref: '#/components/schemas/Item'
  #       '400':
  #         description: Bad Request - Invalid ID format
  #       '401':
  #         description: Unauthorized - Missing or invalid authentication
  #       '404':
  #         description: Not Found - Item not found
  #       '500':
  #         description: Internal Server Error


  # /delete/{type}/{id}:
  #   delete:
  #     tags: [Additional]
  #     summary: Delete item
  #     description: Deletes a resource of specified type by ID
  #     security:
  #       - cookieAuth: []
  #     parameters:
  #       - name: type
  #         in: path
  #         required: true
  #         description: Type of resource to delete
  #         schema:
  #           type: string
  #           enum: [user, seller, item]
  #           example: "item"
  #       - name: id
  #         in: path
  #         required: true
  #         description: ID of the resource to delete
  #         schema:
  #           type: string
  #           example: "507f1f77bcf86cd799439011"
  #     responses:
  #       '200':
  #         description: Resource deleted successfully
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 message:
  #                   type: string
  #                   example: "Item deleted successfully"
  #                 deletedCount:
  #                   type: number
  #                   example: 1
  #       '400':
  #         description: Bad Request - Invalid type parameter
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 error:
  #                   type: string
  #                   example: "Invalid type parameter. Must be one of: user, seller, item"
  #       '401':
  #         description: Unauthorized - Missing or invalid authentication
  #       '403':
  #         description: Forbidden - Insufficient permissions
  #       '404':
  #         description: Not Found - Resource not found
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 error:
  #                   type: string
  #                   example: "Item not found with id 507f1f77bcf86cd799439011"
  #       '500':
  #         description: Internal Server Error
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 error:
  #                   type: string
  #                   example: "Database operation failed"
